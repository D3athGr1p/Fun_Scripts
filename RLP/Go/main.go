package main

import (
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/rlp"
)

type Transaction struct {
	Nonce    uint64
	GasPrice uint64
	GasLimit uint64
	To       *common.Address
	Value    uint64
	Data     []byte
	V        []byte
	R        []byte
	S        []byte
}

func hasPrefixZero(slice []byte) bool {
	return len(slice) > 0 && slice[0] == 0x00
}

func main() {
	hexString := "0xf9036a7884b2d05e008303d09094104098ebe294fa1db89f1c8fef4e8c8eb8ba7b8580b90304884dad2e000000000000000000000000e96a37edde26a456a0c6f90a5f1b81a40a0f10320000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000063eb89da4ed0000020000120b3927e00000000000004a6160694b6241af000000000000000000001b000000000000000000000000000000000000000000000000000000000000004a6862982579dc58b573a5d23304808115ccb352fedfa4bf92742536135661835743d8117fec1cd5fbb3528bf3e2f292ac22cb94e4eaf3554debe2785ffa985800000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000005a0212daacbbdf2baabec3fe6932911bd49e1d770000000000000000000000008f8e04fca018877f488fc0503bc6134d680fd6c000000000000000000000000032133c92983d78ed7193ee4d0f719c578ff5993b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d38d26954c4a8087358b8d698fe5e3255c5aecea0000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000063eb89da4ed0000020100120b3917a00000000000006ee132a3dfa54f81000000000000000000001c00000000000000000000000000000000000000000000000000000000000000d7bfac0957647fa49e4f69d6ed7b8a738c4a2e201ef65dc405e589ff22fe8df20e1fe169875716c76fc04f56b233ec5b9054368afa4cd5894d3fef202e57135e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a76400001ca0083c978b0d562355aa391d32fe80b744e1eca2779be88c2f932b1a34f424d7e8a0000c9a9547282a43f8d1029b5ce6d12353da7e1d3989a319096b285569c47fde"
	rawTransactionHex := strings.TrimPrefix(hexString, "0x")
	rawTxBytes, err := hex.DecodeString(rawTransactionHex)
	if err != nil {
		log.Fatal("Failed to decode raw transaction: ", err)
	}

	decodedTx := new(Transaction)
	rlp.DecodeBytes(rawTxBytes, &decodedTx)
	dataHex := hex.EncodeToString(decodedTx.Data)


	fmt.Printf("Nonce: %+v\n", decodedTx.Nonce)
	fmt.Printf("GasPrice: %+v\n", decodedTx.GasPrice)
	fmt.Printf("GasLimit: %+v\n", decodedTx.GasLimit)
	fmt.Printf("To: %+v\n", decodedTx.To)
	fmt.Printf("Value: %+v\n", decodedTx.Value)
	fmt.Printf("Data: %+v\n", dataHex)

	v, r, s := new(big.Int), new(big.Int), new(big.Int)
	v.SetBytes(decodedTx.V)
	r.SetBytes(decodedTx.R)
	s.SetBytes(decodedTx.S)

	fmt.Printf("v: 0x%x\n", v)
	fmt.Printf("r: 0x%x (has prefix 00: %t)\n", r, hasPrefixZero(decodedTx.R))
	fmt.Printf("s: 0x%x (has prefix 00: %t)\n", s, hasPrefixZero(decodedTx.S))
}